{"version":3,"sources":["constants.js","utils.js","draw.js","model.js","App.js","index.js"],"names":["WORD_INDEX","ANSWERS","COLORS","black","gray","red","green","blue","yellow","teal","brown","COLOR_NAMES","Object","keys","SHAPES","randint","min","max","Math","floor","random","SIN_60","sqrt","drawShape","context","shape","colorName","r","g","b","fillStyle","fillRect","drawBackground","w","MIN_SHAPE_SIZE","MAX_SHAPE_SIZE","h","drawRectangle","beginPath","arc","PI","fill","drawCircle","s","x","y","ceil","moveTo","lineTo","drawTriangle","console","error","loadModelPromise","tf","then","model","getBagOfWords","str","trim","replace","toLowerCase","bagOfWords","Array","length","split","forEach","token","imageData","question","questionBOW","imageTensor","fromPixels","expandDims","div","sub","questionTensor","predict","argMax","arraySync","answerIndex","catch","SAMPLE_QUESTIONS","randomQuestion","isEmbedded","URLSearchParams","window","location","search","has","App","useState","color","setColor","setShape","setQuestion","answer","setAnswer","modelLoaded","setModelLoaded","predicting","setPredicting","mainCanvas","useRef","smallCanvas","onPredict","useCallback","useEffect","current","getContext","scale","IMAGE_SIZE","drawImage","getInference","onQuestionChange","e","target","value","randomizeImage","randomizeQuestion","q","className","href","rel","Card","Header","Body","ref","width","height","style","display","Text","Button","onClick","disabled","Form","Group","controlId","Control","as","placeholder","onChange","variant","size","Alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25b5da85.chunk.js","sourcesContent":["// All of these constants should be kept in sync with their counterparts in easy-VQA,\n// the repo that contains the code to generate the dataset.\n\nconst WORD_INDEX = {'is': 1, 'shape': 2, 'the': 3, 'a': 4, 'image': 5, 'there': 6, 'not': 7, 'what': 8, 'does': 9, 'contain': 10, 'in': 11, 'present': 12, 'color': 13, 'no': 14, 'triangle': 15, 'rectangle': 16, 'circle': 17, 'teal': 18, 'gray': 19, 'brown': 20, 'blue': 21, 'green': 22, 'yellow': 23, 'red': 24, 'black': 25, 'of': 26};\nconst ANSWERS = ['green', 'triangle', 'no', 'rectangle', 'gray', 'red', 'blue', 'yes', 'circle', 'black', 'yellow', 'brown', 'teal'];\n\nconst CANVAS_SIZE = 256;\nconst IMAGE_SIZE = 64;\nconst MIN_SHAPE_SIZE = IMAGE_SIZE / 8;\nconst MAX_SHAPE_SIZE = IMAGE_SIZE / 2;\n\nconst COLORS = {\n  black: 'black',\n  gray: 'rgb(128, 128, 128)',\n  red: 'red',\n  green: 'green',\n  blue: 'blue',\n  yellow: 'yellow',\n  teal: 'teal',\n  brown: 'rgb(165, 42, 42)',\n};\nconst COLOR_NAMES = Object.keys(COLORS);\n\nconst SHAPES = [\n  'rectangle',\n  'circle',\n  'triangle',\n];\n\nexport {\n  WORD_INDEX,\n  ANSWERS,\n  CANVAS_SIZE,\n  IMAGE_SIZE,\n  MIN_SHAPE_SIZE,\n  MAX_SHAPE_SIZE,\n  COLORS,\n  COLOR_NAMES,\n  SHAPES,\n};\n","// Returns a random integer in [min, max] INCLUSIVE (to match Python's randint()).\nexport function randint(min, max) {\n  return Math.floor(min + Math.random() * (max + 1 - min));\n}\n","import { CANVAS_SIZE, IMAGE_SIZE, MIN_SHAPE_SIZE, MAX_SHAPE_SIZE, COLORS } from './constants';\nimport { randint } from './utils';\n\nconst CANVAS_RATIO = CANVAS_SIZE / IMAGE_SIZE;\nconst MIN_CANVAS_SHAPE_SIZE = MIN_SHAPE_SIZE * CANVAS_RATIO;\nconst MAX_CANVAS_SHAPE_SIZE = MAX_SHAPE_SIZE * CANVAS_RATIO;\n\nfunction drawBackground(context) {\n  // The range (230, 255) matches the corresponding range in easy-VQA\n  const r = randint(230, 255);\n  const g = randint(230, 255);\n  const b = randint(230, 255);\n  context.fillStyle = `rgb(${r}, ${g}, ${b})`;\n  context.fillRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n}\n\nfunction drawRectangle(context) {\n  const w = randint(MIN_CANVAS_SHAPE_SIZE, MAX_CANVAS_SHAPE_SIZE);\n  const h = randint(MIN_CANVAS_SHAPE_SIZE, MAX_CANVAS_SHAPE_SIZE);\n  context.fillRect(randint(0, CANVAS_SIZE - w), randint(0, CANVAS_SIZE - h), w, h);\n}\n\nfunction drawCircle(context) {\n  const r = randint(MIN_CANVAS_SHAPE_SIZE, MAX_CANVAS_SHAPE_SIZE) / 2;\n  context.beginPath();\n  context.arc(randint(r, CANVAS_SIZE - r), randint(r, CANVAS_SIZE - r), r, 0, 2 * Math.PI);\n  context.fill();\n}\n\nconst SIN_60 = Math.sqrt(3) / 2;\nfunction drawTriangle(context) {\n  const s = randint(MIN_CANVAS_SHAPE_SIZE, MAX_CANVAS_SHAPE_SIZE);\n  let x = randint(0, CANVAS_SIZE - s);\n  let y = randint(Math.ceil(s * SIN_60), CANVAS_SIZE);\n  context.beginPath();\n  context.moveTo(x, y);\n  context.lineTo(x + s, y);\n  context.lineTo(x + s / 2, y - s * SIN_60);\n  context.lineTo(x, y);\n  context.fill();\n}\n\nexport function drawShape(context, shape, colorName) {\n  drawBackground(context);\n\n  context.fillStyle = COLORS[colorName];\n  switch (shape) {\n    case 'rectangle':\n      drawRectangle(context);\n      break;\n    case 'circle':\n      drawCircle(context);\n      break;\n    case 'triangle':\n      drawTriangle(context);\n      break;\n    default:\n      console.error('Invalid shape name provided', shape);\n      break;\n  }\n}\n","import * as tf from '@tensorflow/tfjs';\n\nimport {WORD_INDEX, ANSWERS} from './constants';\n\nexport const loadModelPromise = tf.loadLayersModel('/model.json')\n  .then(model => {\n    return model;\n  });\n\nfunction getBagOfWords(str) {\n  str = str.trim()\n    .replace(/[^\\w\\s]|_/g, '')\n    .replace(/\\s+/g, ' ')\n    .toLowerCase();\n\n  // We have to add 1 to maintain consistency with how the BOW vectors are\n  // generated in our Python implementation. See easy-VQA-keras for more.\n  const bagOfWords = Array(Object.keys(WORD_INDEX).length + 1).fill(0);\n\n  const tokens = str.split(' ');\n  tokens.forEach(token => {\n    if (token in WORD_INDEX) {\n      bagOfWords[WORD_INDEX[token]] += 1;\n    }\n  });\n  return bagOfWords;\n}\n\nexport async function getInference(imageData, question) {\n  const questionBOW = getBagOfWords(question);\n  return loadModelPromise.then(model => {\n    let imageTensor = tf.browser.fromPixels(imageData, 3);\n    imageTensor = imageTensor.expandDims(0);\n    imageTensor = imageTensor.div(255).sub(0.5);\n\n    let questionTensor = tf.tensor(questionBOW);\n    questionTensor = questionTensor.expandDims(0);\n\n    let output = model.predict([imageTensor, questionTensor]);\n\n    let [answerIndex] = output.argMax(1).arraySync();\n    return ANSWERS[answerIndex];\n  })\n  .catch(console.error);\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\n\nimport { drawShape } from './draw';\nimport { getInference, loadModelPromise } from './model';\nimport { CANVAS_SIZE, IMAGE_SIZE, COLOR_NAMES, SHAPES } from './constants';\nimport { randint } from './utils';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst SAMPLE_QUESTIONS = [\n  'What color is the shape?',\n  'Is there a blue shape in the image?',\n  'Is there a red shape?',\n  'Is there a green shape in the image?',\n  'Is there a black shape?',\n  'Is there not a teal shape in the image?',\n  'Does the image contain a rectangle?',\n  'Does the image not contain a circle?',\n  'What shape is present?',\n  'Is no triangle present?',\n  'Is a circle present?',\n  'Is a rectangle present?',\n  'Is there a triangle?',\n  'What is the color of the shape?',\n  'What shape does the image contain?',\n];\n\nconst randomQuestion = () => SAMPLE_QUESTIONS[randint(0, SAMPLE_QUESTIONS.length - 1)];\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst isEmbedded = urlParams.has('embed');\n\nfunction App() {\n  const [color, setColor] = useState(null);\n  const [shape, setShape] = useState(null);\n  const [question, setQuestion] = useState(randomQuestion());\n  const [answer, setAnswer] = useState(null);\n  const [modelLoaded, setModelLoaded] = useState(false);\n  const [predicting, setPredicting] = useState(false);\n\n  const mainCanvas = useRef(null);\n  const smallCanvas = useRef(null);\n\n  const onPredict = useCallback(() => {\n    setPredicting(true);\n  }, [setPredicting]);\n\n  useEffect(() => {\n    if (smallCanvas.current) {\n      const ctx = smallCanvas.current.getContext('2d');\n      const ratio = IMAGE_SIZE / CANVAS_SIZE;\n      ctx.scale(ratio, ratio);\n    }\n  }, [smallCanvas]);\n\n  useEffect(() => {\n    if (predicting) {\n      // Draw the main canvas to our smaller, correctly-sized canvas\n      const ctx = smallCanvas.current.getContext('2d');\n      ctx.drawImage(mainCanvas.current, 0, 0);\n\n      getInference(smallCanvas.current, question).then(answer => {\n        setAnswer(answer);\n        setPredicting(false);\n      });\n    }\n  }, [predicting, question]);\n\n  const onQuestionChange = useCallback(\n    e => {\n      setQuestion(e.target.value);\n      setAnswer(null);\n    },\n    [setQuestion]\n  );\n\n  const randomizeImage = useCallback(() => {\n    const context = mainCanvas.current.getContext('2d');\n    const colorName = COLOR_NAMES[randint(0, COLOR_NAMES.length - 1)];\n    const shape = SHAPES[randint(0, SHAPES.length - 1)];\n\n    drawShape(context, shape, colorName);\n\n    setColor(colorName);\n    setShape(shape);\n    setAnswer(null);\n  }, [mainCanvas]);\n\n  const randomizeQuestion = useCallback(() => {\n    let q = question;\n    while (q === question) {\n      q = randomQuestion();\n    }\n    setQuestion(q);\n    setAnswer(null);\n  }, [question, setQuestion]);\n\n  useEffect(() => {\n    randomizeImage();\n\n    loadModelPromise.then(() => {\n      setModelLoaded(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"root\">\n      {!isEmbedded && (\n        <>\n          <h1>easy-VQA Demo</h1>\n          <h2>\n            A Javascript demo of a{' '}\n            <a href=\"https://victorzhou.com/blog/easy-vqa/\">Visual Question Answering (VQA)</a>{' '}\n            model trained on the{' '}\n            <a\n              href=\"https://github.com/vzhou842/easy-VQA\"\n              target=\"_blank\"\n              rel=\"nofollow noreferrer\"\n            >\n              easy-VQA dataset\n            </a>\n            .\n          </h2>\n          <p className=\"description\">\n            <b>Read the <a href=\"https://victorzhou.com/blog/easy-vqa/\">blog post</a></b> or see the source code on{' '}\n            <a\n              href=\"https://github.com/vzhou842/easy-VQA-demo\"\n              target=\"_blank\"\n              rel=\"nofollow noreferrer\"\n            >\n              Github\n            </a>\n            .\n          </p>\n        </>\n      )}\n      <div className=\"container\">\n        <Card>\n          <Card.Header>The Image</Card.Header>\n          <Card.Body>\n            <canvas ref={mainCanvas} width={CANVAS_SIZE} height={CANVAS_SIZE} />\n            <canvas\n              ref={smallCanvas}\n              width={IMAGE_SIZE}\n              height={IMAGE_SIZE}\n              style={{ display: 'none' }}\n            />\n            <figcaption className=\"image-caption\">\n              A <b>{color}</b>, <b>{shape}</b> shape.\n            </figcaption>\n            <br />\n            <Card.Text>Want a different image?</Card.Text>\n            <Button onClick={randomizeImage} disabled={predicting}>\n              Random Image\n            </Button>\n          </Card.Body>\n        </Card>\n        <Card>\n          <Card.Header>The Question</Card.Header>\n          <Card.Body>\n            <Form>\n              <Form.Group controlId=\"formQuestion\">\n                <Form.Control\n                  as=\"textarea\"\n                  placeholder={SAMPLE_QUESTIONS[0]}\n                  value={question}\n                  onChange={onQuestionChange}\n                  disabled={predicting}\n                />\n              </Form.Group>\n            </Form>\n            <Card.Text>Want a different question?</Card.Text>\n            <Button onClick={randomizeQuestion} disabled={predicting}>\n              Random Question\n            </Button>\n          </Card.Body>\n        </Card>\n      </div>\n      <Button variant=\"success\" size=\"lg\" onClick={onPredict} disabled={!modelLoaded || predicting}>\n        {modelLoaded ? (predicting ? 'Predicting...' : 'Predict') : 'Loading model...'}\n      </Button>\n      <br />\n      {!!answer ? (\n        <Alert variant=\"primary\">\n          Prediction: <b>{answer}</b>\n        </Alert>\n      ) : predicting ? (\n        <Alert variant=\"light\">The prediction will appear here soon...</Alert>\n      ) : (\n        <Alert variant=\"light\">Click Predict!</Alert>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}